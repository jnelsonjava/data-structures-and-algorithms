package hrank.hashmaps;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CountTriplets {
    /*
    Given a list of numbers and a ratio, count the sets of triplets
    in the list of numbers that match a pattern generated by the ratio
    such that indices of the patter match i < j < k.
    example: [1,3,9,9,27] and ratio: 3
    triplet indexes: [0,1,2], [0,1,3], [1,2,4], and [1,3,4]
    return 4

    Note that because the indices of a match require that the lowest
    value also be the lowest index, the solution can't be a single
    HashMap multiplying occurrences. Instead, use two maps, one for
    the left of each value and one for the right, to check for ordered
    matches.
     */
    static long countTriplets(List<Long> arr, long r) {
        long triplets = 0;
        Map<Long, Long> rightMap = new HashMap<>();
        Map<Long, Long> leftMap = new HashMap<>();

        // count all the occurrences of each number
        for (long num : arr) {
            rightMap.put(num, rightMap.getOrDefault(num, 0L) + 1);
        }

        // check through each number again in order
        for (long num : arr) {
            long center = rightMap.get(num) - 1;
            if (center > 0) {
                rightMap.put(num, center);
            } else {
                rightMap.remove(num);
            }
            if (leftMap.containsKey(num / r) && num % r == 0) {
                if (rightMap.containsKey(num * r)) {
                    long left = leftMap.get(num / r);
                    long right = rightMap.get(num * r);
                    triplets += left * right;
                }
            }
            leftMap.put(num, leftMap.getOrDefault(num, 0L) + 1);
        }

        return triplets;
    }
}
